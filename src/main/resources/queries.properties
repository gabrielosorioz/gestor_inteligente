# product to PostgreSQL
postgresql.insertProduct=INSERT INTO product (product_id,product_code, bar_code, description, cost_price, selling_price, profit_margin_percent, markup_percent, quantity, status, date_create, date_update, date_delete, supplier_id, category_id) VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
postgresql.updateProduct=UPDATE product SET product_code=?, bar_code=?, description=?, cost_price=?, selling_price=?, profit_margin_percent=?, markup_percent=?, quantity=?, status=?, date_create=?, date_update=?, date_delete=?, supplier_id=?, category_id=? WHERE product_id = ?;
postgresql.deleteProductById=DELETE FROM product WHERE product_id = ?
postgresql.findProductById=SELECT * FROM product WHERE product_id = ?;
postgresql.findAllProducts=SELECT * FROM product;
postgresql.productByDateRange=SELECT * FROM product WHERE (date_create BETWEEN ? AND ?) OR (date_update BETWEEN ? AND ?);
postgresql.productByPriceRange=SELECT * FROM product WHERE selling_price BETWEEN ? AND ?;
postgresql.productByProductCode =SELECT * FROM product WHERE product_code=?;
postgresql.productByBarCode =SELECT COUNT(*) FROM product WHERE bar_code=?;
postgresql.productMaxId=SELECT MAX(product_id) AS max_id FROM product;
postgresql.existsProductCode=SELECT COUNT(*) FROM product WHERE product_code= ?;
postgresql.maxProductCode= SELECT MAX(product_code) AS max_pcode FROM product

# category PostgreSQL
postgresql.insertCategory=INSERT INTO category (description) VALUES (?);
postgresql.updateCategory = UPDATE category SET description = ? WHERE id = ?;
postgresql.deleteCategoryById=DELETE FROM category WHERE id = ?;
postgresql.findCategoryByName=SELECT * FROM category WHERE name = ?;
postgresql.findCategoryById=SELECT * FROM category WHERE id = ?;

# supplier PostgreSQL
postgreqsl.insertSupplier=INSERT INTO supplier (id, name, CNPJ, address, cellPhone, email) VALUES (?, ?, ?, ?, ?, ?);
postgresql.findSupplierById=SELECT * FROM supplier WHERE id = ?;
postgresql.findAllSuppliers=SELECT * FROM supplier;
postgresql.updateSupplier=UPDATE supplier SET name = ?, CNPJ = ?, address = ?, cellPhone = ?, email = ? WHERE id = ?;
postgresql.deleteSupplierById=DELETE FROM supplier WHERE id = ?;

# sale PostgreSQL
postgresql.insertSale=INSERT INTO Sale (dateSale, dataCancel, totalChange, totalAmountPaid, originalTotalPrice, totalPrice, totalDiscount, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
postgresql.findSaleById=SELECT * FROM sale WHERE id = ?;
postgresql.findAllSales=SELECT * FROM saleproduct;
postgresql.updateSale=UPDATE Sale \
SET datesale = ?, \
    datacancel = ?, \
    totalchange = ?, \
    totalamountpaid = ?, \
    originaltotalprice = ?, \
    totalprice = ?, \
    totaldiscount = ?, \
    status = ? \
WHERE id = ?

# sale product PostgreSQL
postgresql.findSaleProductBySaleId=SELECT * FROM saleproduct WHERE saleid = ?;
postgresql.insertSaleProduct=INSERT INTO saleproduct (saleid, product_id, quantity, unitprice, originalsubtotal, subtotal, discount) VALUES (?, ?, ?, ?, ?, ?, ?);
postgresql.findSaleProductById=SELECT * FROM saleproduct WHERE id= ?;
postgresql.findAllSaleProduct= SELECT * FROM saleproduct;
postgresql.deleteSaleProductById=DELETE FROM sale_product WHERE id = ?;
postgresql.updateSaleProduct=updateSaleProduct=UPDATE saleproduct SET saleid = ?, productid = ?, quantity = ?, unitprice = ?, originalsubtotal = ?, subtotal = ?, discount = ? WHERE id = ?;

# payment PostgreSQL
postgresql.insertPayment=INSERT INTO payment (description) VALUES (?);
postgresql.findPaymentById=SELECT * FROM payment WHERE id = ?;
postgresql.findAllPayments=SELECT * FROM payment;
postgresql.updatePayment=UPDATE payment SET description WHERE id = ?;
postgresql.deletePaymentById = DELETE FROM payment WHERE id = ?;

# sale payment PostgreSQL
postgresql.updateSalePayment= UPDATE salepayment SET saleid, payment_id, amount WHERE id = ?;
postgresql.insertSalePayment=INSERT INTO salepayment (saleid, payment_id, amount) VALUES (?,?,?);
postgresql.findSalePaymentById=SELECT * FROM salepayment WHERE id = ?;
postgresql.findAllSalePayments=SELECT * FROM salepayment;
postgresql.deleteSalePaymentById=DELETE FROM salepayment WHERE id = ?;

# checkout PostgreSQL
postgresql.updateCheckout=UPDATE checkout \
    SET status = ?, \
        opened_at = ?, \
        closed_at = ?, \
        initial_cash = ?, \
        total_entry = ?, \
        total_exit = ?, \
        closing_balance = ?, \
        opened_by = ?, \
        closed_by = ?, \
        created_at = ?, \
        updated_at = ? \
    WHERE id = ?;
postgresql.insertCheckout=INSERT INTO checkout ( \
        status, \
        opened_at, \
        closed_at, \
        initial_cash, \
        total_entry, \
        total_exit, \
        closing_balance, \
        opened_by, \
        closed_by, \
        created_at, \
        updated_at \
    ) VALUES (?,?,?,?,?,?,?,?,?,?,?);
postgresql.findCheckoutById=SELECT * \
    FROM checkout \
    WHERE id = ?;
postgresql.findAllCheckouts=SELECT * \
    FROM checkout;
postgresql.deleteCheckoutById=DELETE \
    FROM checkout \
    WHERE id = ?;

postgresql.findOpenCheckoutForToday=SELECT * \
  FROM checkout \
  WHERE status = ? \
  AND DATE(opened_at) = ? AND closed_at IS NULL


# checkout movement PostgreSQL
postgresql.updateCheckoutMovement=UPDATE checkoutmovement \
    SET checkout_id = ?, \
        date_time = ?, \
        value = ?, \
        obs = ?, \
        payment_id = ?, \
        checkoutmovement_type_id = ?
    WHERE id = ?;

postgresql.insertCheckoutMovement=INSERT INTO checkoutmovement ( \
        checkout_id, \
        date_time, \
        value, \
        obs, \
        payment_id, \
        checkoutmovement_type_id\
    ) VALUES (?,?,?,?,?,?);

postgresql.findCheckoutMovementById=SELECT * \
    FROM checkoutmovement \
    WHERE id = ?;

postgresql.findAllCheckoutMovements=SELECT * \
    FROM checkoutmovement;

postgresql.deleteCheckoutMovementById=DELETE \
    FROM checkoutmovement \
    WHERE id = ?;

# checkoutmovement_type PostgreSQL
postgresql.updateCheckoutMovementType=UPDATE checkoutmovement_type \
    SET name = ? \
    WHERE id = ?;

postgresql.insertCheckoutMovementType=INSERT INTO checkoutmovement_type ( \
        name \
    ) VALUES (?);

postgresql.findCheckoutMovementTypeById=SELECT * \
    FROM checkoutmovement_type \
    WHERE id = ?;

postgresql.findAllCheckoutMovementTypes=SELECT * \
    FROM checkoutmovement_type;

postgresql.deleteCheckoutMovementTypeById=DELETE \
    FROM checkoutmovement_type \
    WHERE id = ?;

# sale_checkoutmovement

postgresql.updateSaleCheckoutMovement=UPDATE sale_checkoutmovement \
    SET checkout_movement_id = ?, \
        sale_id = ? \
    WHERE id = ?;

postgresql.insertSaleCheckoutMovement=INSERT INTO sale_checkoutmovement ( \
        checkout_movement_id, \
        sale_id \
    ) VALUES (?, ?);

postgresql.findSaleCheckoutMovementById=SELECT * \
    FROM sale_checkoutmovement \
    WHERE id = ?;

postgresql.findAllSaleCheckoutMovements=SELECT * \
    FROM sale_checkoutmovement;

postgresql.deleteSaleCheckoutMovementById=DELETE \
    FROM sale_checkoutmovement \
    WHERE id = ?;





